{"version":3,"sources":["constants/weather.js","utils/utils.js","components/WeatherSettings/GradeType.js","components/WeatherSettings/index.js","components/WeatherLocation/LocationTitle.js","components/WeatherContent/WeatherMain.js","components/WeatherContent/WeatherHours.js","components/WeatherContent/WeatherForecast.js","components/WeatherContent/index.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/WeatherForecast.js","components/WeatherLocation/WeatherData/WeatherBottom.js","components/WeatherLocation/WeatherData/index.js","services/openweathermap.js","components/WeatherLocation/index.js","components/WeatherLocation/LocationList.js","services/google.js","App.js","services/ip.js","registerServiceWorker.js","index.js"],"names":["WEATHER_TYPE_CELSIUS","LIST_WEATHER_STATES_ID","TORMENTA","LLOVIZNA","LLUVIA","NIEVE","√ÅTMOSFERA","DESPEJADO","NUBES","data","temperature","weatherState","humidity","wind","max_temperature","min_temperature","pressure","deg","time","sunset","sunrise","forecastData","gradeConverterFromKelvin","grades","type","Math","round","getGradeConversion","gradeAbbreviation","abbr","getIconByIdMaped","id","sunOrMoon","Date","getHours","concat","getTimeFromUnixTimestamp","unixTimestamp","getDayOfTheWeek","day","getAbbreviateDate","date","getDate","getMonth","getDescriptionById","LIST_STATES","Object","keys","actualState","forEach","state","getIconFlag","country","flag","split","substring","toLowerCase","getDateForSun","formatedDate","today","getDay","getMinutes","getForecastbyDays","forecastList","formated","forecast","forecastDayWeek","hasOwnProperty","push","GradeType","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","wType","changeGrade","bind","assertThisInitialized","changeWeather","setState","react_default","a","createElement","className","onChange","checked","htmlFor","Component","WeatherSettings","showCities","_this2","_this$props","cities","selectedCities","WeatherSettings_GradeType","onClick","map","location","key","join","style","margin","LocationTitle","city","pinClass","selectedIndicator","WeatherMain","weatherType","parseInt","strDate","toString","toUpperCase","getFormatedDate","WeatherHours","_props$forecast","_","uniqueId","propType","PropTypes","arrayOf","shape","number","isRequired","string","instanceOf","WeatherForecast","selectedDay","selectDay","byDays","daysOfWeek","css","WeatherContent_WeatherHours","WeatherContent","_ref","showFullForecast","handleGetFullForecast","WeatherLocation_LocationTitle","WeatherContent_WeatherForecast","WeatherContent_WeatherMain","WeatherExtraInfo","WeatherTemperature","WeatherData_WeatherExtraInfo","dayForecast","WeatherBottom","handleForecastVisibility","WeatherData","forecastVisibility","onSelectLocation","selectLocation","fiveDaysForecastData","filter","getNext5DaysForecastData","WeatherData_WeatherForecast","WeatherData_WeatherTemperature","WeatherData_WeatherBottom","handleResponse","response","isError","error","cod","name","sys","main","temp","weather","speed","toFixed","temp_max","temp_min","dt","OpenWeatherMap","getCurrentDataByCity","URL","process","getUrlCurrentDataByCity","Promise","resolve","reject","fetch","then","res","json","weatherData","catch","getForecastDataByCity","getUrlForecastDataByCity","list","getCurrentDataByCoordinates","latitude","longitude","getUrlCurrentDataByCoordinates","getForecastDataByCoordinates","getUrlForecastDataByCoordinates","WeatherLocation","message","cssClass","_ref2","index","selectedCity","_this$state","WeatherLocation_WeatherData","LocationList","handleSelectLocation","components_WeatherLocation","isNotError","status","Google","getCitiesByCoordinates","getUrlGeocodeByCoordinates","formatedCities","results","addresses","types","includes","predefinedCities","App","dotenv","config","changeWeatherType","getLocation","elem","ReactDOM","findDOMNode","window","requestAnimationFrame","transform","transition","handleFade","coords","i","length","components_WeatherSettings","components_WeatherContent","WeatherLocation_LocationList","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","render","src_App_0","document","getElementById","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.783a25d0.chunk.js","sourcesContent":["export const WEATHER_APP_ID = '061f24cf3cde2f60644a8240302983f2'\nexport const BASE_API_URL = 'https://api.openweathermap.org/data/2.5/weather'\nexport const API_URL_BY_COORDINATES = (latitude, longitude) => `${BASE_API_URL}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\nexport const API_URL_BY_CITY = (city, country) => `${BASE_API_URL}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nexport const CLEAR_SKY = 'CLEAR SKY'\nexport const FEW_CLOUDS = 'FEW CLOUDS'\nexport const SCATTERED_CLOUDS = 'SCATTERED CLOUDS'\nexport const BROKEN_CLOUDS = 'BROKEN CLOUDS'\nexport const SHOWER_RAIN = 'SHOWER RAIN'\nexport const RAIN = 'RAIN'\nexport const THUNDERSTORM = 'THUNDERSTORM'\nexport const SNOW = 'SNOW'\nexport const MIST = 'MIST'\nexport const HAZE = 'HAZE'\nexport const FOG = 'FOG'\nexport const WEATHER_TYPE_CELSIUS = 'CELSIUS'\nexport const WEATHER_TYPE_FAHRENHEIT = 'FAHRENHEIT'\n\nexport const LIST_WEATHER_STATES_ID = {\n  \"TORMENTA\": [200, 232],\n  \"LLOVIZNA\": [300, 321],\n  \"LLUVIA\": [500, 531],\n  \"NIEVE\": [600, 622],\n  \"√ÅTMOSFERA\": [701, 781],\n  \"DESPEJADO\": [800, 800],\n  \"NUBES\": [801, 804]\n}\n\nexport const ID_THUNDERSTORM = [200, 232]\nexport const ID_DRIZZLE = [300, 321]\nexport const ID_RAIN = [500, 531]\nexport const ID_SNOW = [600, 622]\nexport const ID_ATMOSPHERE = [701, 781]\nexport const ID_CLEAR = [800, 800]\nexport const ID_CLOUDS = [801, 804]\nexport const HTTP_200_SUCCESS = \"200\" \n\nexport const data = { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 6.57, \"max_temperature\": 301.512, \"min_temperature\": 301.512, \"pressure\": 1011.82, \"deg\": 60.5004, \"time\": 1537741360, \"sunset\": 1537741360, \"sunrise\": 1537741360}\nexport const forecastData = [{ \"temperature\": 29, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.26, \"max_temperature\": 29, \"min_temperature\": 28, \"pressure\": 1011.38, \"deg\": 67.0176, \"time\": 1537741360 }, { \"temperature\": 29, \"weatherState\": 800, \"humidity\": 100, \"wind\": 6.88, \"max_temperature\": 29, \"min_temperature\": 28, \"pressure\": 1012.93, \"deg\": 75.5027, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 802, \"humidity\": 100, \"wind\": 6.32, \"max_temperature\": 28, \"min_temperature\": 27, \"pressure\": 1014.03, \"deg\": 80.0045, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.67, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.85, \"deg\": 83.5023, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.56, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.09, \"deg\": 83.5001, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.03, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.15, \"deg\": 87.0086, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.03, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.89, \"deg\": 60.5002, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.31, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.15, \"deg\": 47.0029, \"time\": 1537741360 }, { \"temperature\": 26, \"weatherState\": 500, \"humidity\": 100, \"wind\": 4.31, \"max_temperature\": 26, \"min_temperature\": 26, \"pressure\": 1010.92, \"deg\": 52.0033, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 2.48, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.33, \"deg\": 74.5062, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 2.12, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.78, \"deg\": 67.5021, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 0.97, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.57, \"deg\": 47.0011, \"time\": 1537741360 }, { \"temperature\": 26, \"weatherState\": 500, \"humidity\": 100, \"wind\": 0.45, \"max_temperature\": 26, \"min_temperature\": 26, \"pressure\": 1012.43, \"deg\": 111.001, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 1.47, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.44, \"deg\": 188.5, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 800, \"humidity\": 100, \"wind\": 0.76, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1014.1, \"deg\": 345.002, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 800, \"humidity\": 100, \"wind\": 2.86, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.27, \"deg\": 32.5018, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 802, \"humidity\": 100, \"wind\": 3.91, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1011.01, \"deg\": 71.5061, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 4.23, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.87, \"deg\": 80.5005, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.81, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.02, \"deg\": 83.5026, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.27, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.13, \"deg\": 95.0026, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 802, \"humidity\": 100, \"wind\": 3.41, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.19, \"deg\": 93.5004, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 1.96, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.52, \"deg\": 119.501, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 0.92, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.56, \"deg\": 44.0032, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 1.62, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.71, \"deg\": 23.0004, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 4.51, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1010.95, \"deg\": 64.0089, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.57, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.91, \"deg\": 76.0018, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.72, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.7, \"deg\": 89.0038, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.21, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.55, \"deg\": 93.5011, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.11, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1011.67, \"deg\": 95.5003, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 6.41, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.28, \"deg\": 98.5032, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 98, \"wind\": 5.02, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.95, \"deg\": 78.001, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 5.37, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.96, \"deg\": 65.0002, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 6.63, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.38, \"deg\": 58.5024, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.26, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.51, \"deg\": 74.0024, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.06, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.79, \"deg\": 81.0007, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 802, \"humidity\": 100, \"wind\": 6.51, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.69, \"deg\": 84.5049, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 803, \"humidity\": 100, \"wind\": 5.81, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.58, \"deg\": 88.0011, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 803, \"humidity\": 100, \"wind\": 6, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.9, \"deg\": 85.0021, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 6.92, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1014.67, \"deg\": 77.0023, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 6.82, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.8, \"deg\": 70.0002, \"time\": 1537741360 }]","import {\n  CLEAR_SKY,\n  FEW_CLOUDS,\n  SCATTERED_CLOUDS,\n  BROKEN_CLOUDS,\n  SHOWER_RAIN,\n  RAIN,\n  THUNDERSTORM,\n  SNOW,\n  MIST,\n  HAZE,\n  FOG,\n  ID_THUNDERSTORM,\n  ID_DRIZZLE,\n  ID_RAIN,\n  ID_SNOW,\n  ID_ATMOSPHERE,\n  ID_CLEAR,\n  ID_CLOUDS,\n  WEATHER_TYPE_CELSIUS,\n  WEATHER_TYPE_FAHRENHEIT,\n  LIST_WEATHER_STATES_ID\n} from '../constants/weather'\n\n/**\n * This function converts from kelvin to celsius or fahrenheit\n * @param   {number}  grades      Grades in kelvin.\n * @param   {string}  type        Type of temperature what it will be the response.\n * @return  {number}  Rounded result of the conversion.\n */\n\nexport const gradeConverterFromKelvin = (grades, type) => {\n  let temperature \n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      temperature = grades - 273.15;\n      break;\n    case WEATHER_TYPE_FAHRENHEIT:\n      temperature = grades * (9 / 5) + 32\n      break\n    default:\n      temperature = grades\n      break\n  }\n  return Math.round(temperature)\n}\n\nexport const getGradeConversion = (grades, type) => {\n  let temperature\n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      temperature = grades\n      break;\n    case WEATHER_TYPE_FAHRENHEIT:\n      temperature = grades * (9 / 5) + 32\n      break\n    default:\n      temperature = grades\n      break\n  }\n  return Math.round(temperature)\n}\n/**\n * This function give the abbreviation of the type of temperature\n * @param   {string}    type      [CELSIUS, FAHRENHEIT].\n * @return  {string}    Temperature abbreviation [C¬∫, F¬∫]\n */\n\nexport const gradeAbbreviation = (type) => {\n  let abbr = ''\n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      abbr = 'C¬∫'\n      break\n    case WEATHER_TYPE_FAHRENHEIT:\n      abbr = 'F¬∫'\n      break\n    default:\n      abbr = 'C¬∫'\n      break\n  }\n  return abbr\n}\n\n/**\n * This function give the navigator.geolocation.getCurrentPosition\n * @param   {options}    Options to get the current position\n * @return  {promise}    Object with latitude and longitude\n */\n\nexport const getPosition = (options) => {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  })\n}\n\n/**\n * This function give the icon class for selected state \n * @param   {weatherState}    Weather state of API response\n * @return  {icon}     String with icon class for the @param state \n */\nexport const getIcon = (state) => {\n  let icon = 'weather-icon wi '\n  switch (state) {\n    case CLEAR_SKY:\n      return icon += 'wi-day-sunny'\n    case FEW_CLOUDS:\n      return icon += 'wi-cloud'\n    case SCATTERED_CLOUDS:\n      return icon += 'wi-day-cloudy-high'\n    case BROKEN_CLOUDS:\n      return icon += 'wi-cloudy'\n    case SHOWER_RAIN:\n      return icon += 'wi-showers'\n    case RAIN:\n      return icon += 'wi-rain'\n    case THUNDERSTORM:\n      return icon += 'wi-thunderstorm'\n    case SNOW:\n      return icon += 'wi-snow'\n    case MIST:\n      return icon += 'wi-day-rain-mix'\n    case HAZE:\n      return icon += 'wi-day-haze'\n    case FOG:\n      return icon += 'wi-fog'\n    default:\n      return icon += 'wi-day-sunny'\n  }\n}\n/**\n * This function give the icon class for selected state \n * @param   {weatherStateId}    ID of Weather Conditions \n * @description SEE for more info https://openweathermap.org/weather-conditions\n * @return  {icon}     String with icon class for the @param id \n */\nexport const getIconById = (id) => { \n  const icon = 'weather-icon wi '\n  if (id >= ID_THUNDERSTORM[0] && id <= ID_THUNDERSTORM[1]){\n    return icon + 'wi-thunderstorm' \n  } else if (id >= ID_DRIZZLE[0] && id <= ID_DRIZZLE[1]) {\n    return icon + 'wi-day-rain-mix'\n  } else if (id >= ID_RAIN[0] && id <= ID_RAIN[1]) {\n    return icon + 'wi-rain'\n  } else if (id >= ID_SNOW[0] && id <= ID_SNOW[1]) {\n    return icon + 'wi-snow'\n  } else if (id >= ID_ATMOSPHERE[0] && id <= ID_ATMOSPHERE[1]) {\n    return icon + 'wi-day-haze'\n  } else if (id >= ID_CLEAR[0] && id <= ID_CLEAR[1]) {\n    return icon + 'wi-day-sunny'\n  } else if (id >= ID_CLOUDS[0] && id <= ID_CLOUDS[1]){\n    return icon + 'wi-cloud'\n  } else {\n    return icon + 'wi-day-sunny'\n  }\n}\n\n// YES! POR FIN ALGO SENCILLO Y EFICIENTE\nexport const getIconByIdMaped = (id, time) => {\n  let date = new Date(time)\n  const sunOrMoon = (date.getHours() > 18)? 'night' : 'day'\n  return `weather-icon wi wi-owm-${sunOrMoon}-${id}`  \n}\n\n/**\n * @param   {actualDate}    Timestamp of actual date \n * @description This function return the next five days given the @param date\n * @return  {Array}     Array with timestamps of the next five days \n */\n\nexport const getNext5Days = (actualDate) => {\n  let now = new Date(actualDate)\n  now.setDate(now.getDate() + 1)\n  const numberOfDays = 5\n  let next5Days = new Array(numberOfDays).fill(now)\n\n  return next5Days.map((day, i) => {\n    const nextDay = day.getDate() + i\n    const newDate = new Date(day).setDate(nextDay)\n    return newDate\n  })\n}\n\nexport const getTimeFromUnixTimestamp = (unixTimestamp) => {\n  return unixTimestamp * 1000\n}\n\nexport const getDayOfTheWeek = (day) => {\n  const week = ['DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB']\n  return week[day]\n}\n\nexport const getAbbreviateDate = (date) => {\n  return `${date.getDate()}/${date.getMonth() + 1}`\n}\n\nexport const getFormatedDate = (date) => {\n  const formatedDate = new Date(date)\n  const strDate = formatedDate.toString()\n  return `${strDate.substring(3, 15).toUpperCase()} `\n}\n\nexport const getDescriptionById = (id) => {\n  const LIST_STATES = Object.keys(LIST_WEATHER_STATES_ID)\n  let actualState = \"\"\n  LIST_STATES.forEach((state)=>{\n    if (id >= LIST_WEATHER_STATES_ID[state][0] && id <= LIST_WEATHER_STATES_ID[state][1]){\n      actualState = state\n    }\n  })\n  return actualState\n}\n\nexport const getIconFlag = (country) => {\n  const flag = country.split(\",\")[1].substring(1, 3).toLowerCase()\n  return `icon-pin em em-flag-${flag} flag-pin`\n}\n\nexport const getDateForSun = (date) => {\n  const formatedDate = new Date(getTimeFromUnixTimestamp(date));\n  const today = new Date();\n  if(formatedDate.getDay() === today.getDay()){\n    return `Hoy, ${(formatedDate.getHours() === 0) ? '00' : formatedDate.getHours()}:${formatedDate.getMinutes()}`;\n  } else {\n    return `Ma√±ana, ${(formatedDate.getHours() === 0) ? '00' : formatedDate.getHours()}:${formatedDate.getMinutes()}`\n  }\n}\n\nexport const getNext5DaysForecastData = (data) => {\n  return data.filter((forecast) => {\n    const time = new Date(forecast.time)\n    return time.getHours() === 22;\n  })\n}\n\nexport const getForecastbyDays = (forecastList) => {\n  const formated = {}\n  forecastList.forEach((forecast)=>{\n    const forecastDayWeek = new Date(forecast.time)\n    const day = getDayOfTheWeek(forecastDayWeek.getDay())\n    if(formated.hasOwnProperty(day)){\n      formated[day].push(forecast)\n    } else {\n      formated[day] = [forecast]\n    }\n  })\n  return formated\n}\n\nexport const getFormatedCity = (city)=>{\n  return [city.split(',')[0], city.split(',')[1].substring(1)]\n}","import React, { Component } from 'react'\nimport {WEATHER_TYPE_CELSIUS, WEATHER_TYPE_FAHRENHEIT } from '../../constants/weather'\nimport { gradeAbbreviation } from '../../utils/utils'\n\n\nclass GradeType extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: props.wType,\n    }\n    this.changeGrade = this.changeGrade.bind(this)\n    this.changeWeather = props.changeWeather\n  }\n  \n  changeGrade(){\n    if(this.state.type === WEATHER_TYPE_CELSIUS){\n      this.setState({\n        type: WEATHER_TYPE_FAHRENHEIT\n      })\n    } else {\n      this.setState({\n        type: WEATHER_TYPE_CELSIUS\n      })\n    }\n    this.changeWeather(this.state.type)\n  }\n  componentDidMount(){\n    this.changeGrade()\n  }\n  render(){\n    return (\n      <div className=\"weather-grade-type\">\n        <input \n          onChange={this.changeGrade} \n          id=\"cmn-toggle-4\" \n          className=\"cmn-toggle cmn-toggle-round-flat\" \n          type=\"checkbox\" \n          checked={(this.state.type === WEATHER_TYPE_CELSIUS? true : false)} \n        />\n        <label htmlFor=\"cmn-toggle-4\">\n          {\n            (this.state.type === WEATHER_TYPE_CELSIUS) ?\n              gradeAbbreviation(WEATHER_TYPE_CELSIUS)\n              :\n              gradeAbbreviation(WEATHER_TYPE_FAHRENHEIT)\n          }\n        </label>\n      </div>\n    )\n  }\n}\n\n\nexport default GradeType","import React, {Component} from 'react'\nimport { getIconFlag } from '../../utils/utils'\nimport GradeType from './GradeType'\n\nclass WeatherSettings extends Component {\n  constructor(){\n    super()\n    this.state = {\n      showCities: false\n    }\n    this.showCities = this.showCities.bind(this)\n  }\n  showCities(){\n    this.setState({\n      showCities: !this.state.showCities\n    })\n  }\n  render(){\n    const { showCities } = this.state\n    const {changeWeather, wType, cities, selectedCities } = this.props\n    return (\n    <div className=\"weather-settings\">\n      <span className=\"menu-title\">\n          Weather App\n      </span>\n      <GradeType changeWeather={changeWeather} wType={wType} />\n        <button className=\"button-add-cities\" onClick={() => { this.showCities() }}><i className=\"fa fa-plus\"></i> CIUDADES</button>\n      {\n        (showCities)?\n        <div className=\"modal\">\n          <div className=\"header\">\n            {\n              selectedCities.map((location)=>{\n                    return (\n                      <div \n                        className=\"choosed-cities\"\n                        key={`${location[0]}-${location[1]}-selected-cities`}\n                      >\n                        <i className={`${getIconFlag(location.join(','))} icon-predefined-cities`}></i>\n                        {`${location[0]}, ${location[1]}`}\n                      </div>\n                    )\n              })\n            }\n          </div>\n          <br/>\n          <div>\n            <div className=\"modal-center\">\n              {\n                cities.map((location)=>{\n                      return(\n                        <div \n                          className=\"predefined-cities\" \n                          style={{margin: '0 auto'}}\n                          key={`${location[0]}-${location[1]}-cities`}\n                        >\n                          <i className={`${getIconFlag(location.join(','))} icon-predefined-cities`}></i>\n                          {`${location[0]}, ${location[1]}`}\n                        </div>\n                      )\n                })\n              }\n            </div>\n          </div>\n          <div className=\"footer\">\n            <button className=\"button\" onClick={() => this.showCities()}>\n              CLOSE\n            </button>\n          </div>\n        </div>\n        :\n        \"\"\n      }\n    </div>\n    )\n  }\n}\n\nexport default WeatherSettings","import React from 'react'\nimport PropType from 'prop-types'\nimport './style.css'\n\nconst LocationTitle = (props) => {\n    const { city, pinClass, selectedIndicator } = props\n    return (\n        <div> \n            <h1 className={`weather-title-primary`}>\n                <i className={`${pinClass}`}></i>\n                  {city}\n                {\n                    (selectedIndicator)?\n                    <span className=\"arrow-right\"></span>\n                    :\n                    \"\"\n                } \n                \n            </h1>\n            \n        </div>\n    )\n}\n\nLocationTitle.propTypes = {\n    city: PropType.string.isRequired,\n}\n\nexport default LocationTitle","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { gradeAbbreviation, getGradeConversion, getDescriptionById, getIconByIdMaped, getDateForSun, getFormatedDate } from '../../utils/utils'\nimport './style.css'\n\nconst WeatherMain = (props) => {\n  const { data, weatherType } = props\n  return (\n        <div className=\"weather-current-content\">\n          <span className=\"weather-main-description\">\n            { \n                (data.wind > 5)?\n              `${getDescriptionById(data.weatherState)} CON VIENTO`\n              :\n              getDescriptionById(data.weatherState)\n            }\n          </span>\n          <div className=\"weather-main-temp\">\n            <i className={getIconByIdMaped(data.weatherState, data.time)}></i>\n            {getGradeConversion(data.temperature, weatherType)}\n            <span className=\"weather-type\"> {gradeAbbreviation(weatherType)}</span>\n          </div>\n          <div className=\"weather-main-info\">\n            <div className=\"weather-main-info-left\">\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-raindrop\"></i>Humedad: {data.humidity} %</h2>\n              <h2 className=\"weather-main-item\"><i className={`icons-main-content wi wi-wind-beaufort-${parseInt(data.wind, 10)}`}></i>Viento: {data.wind} m/s</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-barometer\"></i>Presi√≥n: {data.pressure} bar</h2>\n            </div>\n            <div className=\"weather-main-info-right\">\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-sunset\"></i>Puesta: {getDateForSun(data.sunset)}</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-sunrise\"></i>Salida: {getDateForSun(data.sunrise)}</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content fa fa-calendar\"></i>Fecha: {getFormatedDate(data.time)}</h2>\n            </div>\n          </div>\n        </div>\n  )\n}\nWeatherMain.propTypes = {\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }).isRequired\n}\nexport default WeatherMain","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { gradeAbbreviation, getGradeConversion, getIconByIdMaped } from '../../utils/utils'\nimport './style.css'\n\nconst WeatherHours = (props) => {\n    const { temperature, weatherState, time, humidity, wind, pressure } = props.forecast\n    const weatherType = props.weatherType\n    const formatedDate = new Date(time)\n    return (<div key={_.uniqueId(\"hours_\")} className=\"weather-forecast-main\">\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content fa fa-clock-o\"></i>{formatedDate.getHours()}:00</span>\n        <span className=\"weather-forecast-item\"> <i className={getIconByIdMaped(weatherState, time) + ' icon-forecast'}></i>{getGradeConversion(temperature, weatherType) + ' ' + gradeAbbreviation(weatherType)}</span>\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content wi wi-raindrop\"></i>{humidity} %</span>\n        <span className=\"weather-forecast-item\"><i className={`icons-main-content wi wi-wind-beaufort-${parseInt(wind, 10)}`}></i>{wind} m/s</span>\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content wi wi-barometer\"></i>{pressure} bar</span>\n      <br />\n    </div>)\n}\n\nWeatherHours.propType = {\n  forecast: PropTypes.arrayOf(\n    PropTypes.shape({\n      temperature: PropTypes.number.isRequired,\n      weatherType: PropTypes.string.isRequired,\n      weatherState: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      wind: PropTypes.number.isRequired,\n      pressure: PropTypes.number.isRequired,\n      time: PropTypes.instanceOf(Date).isRequired,\n    })\n  )\n\n}\n\nexport default WeatherHours","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport WeatherHours from './WeatherHours'\nimport { getAbbreviateDate, getForecastbyDays } from '../../utils/utils'\nimport './style.css'\n\nclass WeatherForecast extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      selectedDay: Object.keys(getForecastbyDays(props.forecastData))[0],\n    }\n    this.selectDay = this.selectDay.bind(this)\n  }\n  selectDay(day){\n    this.setState({\n      selectedDay: day\n    })\n  }\n  render(){\n    const { selectedDay } = this.state\n    const { forecastData, weatherType } = this.props\n    const byDays = getForecastbyDays(forecastData)\n    const daysOfWeek = Object.keys(byDays)\n    return (\n      <div className=\"weather-forecast-content\">\n        <div className=\"weather-forecast-days-list\">\n          {\n            daysOfWeek.map((day) => {\n              const date = getAbbreviateDate(new Date(byDays[day][0]['time']))\n              const css = (day === selectedDay)? \" active\" : \"\"\n              \n              return <div\n                key={_.uniqueId(`main_forecast_${day}_`)}\n                onClick={() => { this.selectDay(day) }}\n                className={`weather-forecast-days ${css}`}>\n                {day}\n                <br />\n                {date}\n              </div>\n            })\n          }\n        </div>\n        <div className=\"weather-forecast-hours-list\">\n          {\n            byDays[selectedDay].map((forecast) => {\n              return <WeatherHours \n                key={_.uniqueId(`main_forecast_hours_`)}\n                forecast={forecast} \n                weatherType={weatherType} \n              />\n            })\n          }\n        </div>\n       \n        \n      </div>\n    )\n  }\n}\n\nWeatherForecast.propTypes = {\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })).isRequired,\n}\n\nexport default WeatherForecast","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport LocationTitle from '../WeatherLocation/LocationTitle'\nimport WeatherMain from './WeatherMain'\nimport WeatherForecast from './WeatherForecast'\nimport { getIconFlag } from '../../utils/utils'\nimport './style.css'\n\nclass WeatherContent extends Component {\n  constructor({ city, data, forecastData, weatherType }){\n    super()\n    this.state = { \n      city, \n      data, \n      forecastData, \n      weatherType,\n      showFullForecast: false\n    }\n    this.handleGetFullForecast = this.handleGetFullForecast.bind(this)\n  }\n  handleGetFullForecast(){\n    this.setState({\n      showFullForecast: !this.state.showFullForecast\n    })\n  }\n\n  render(){\n    const { showFullForecast } = this.state\n    const {  weatherType, city, data, forecastData } = this.props\n    return (\n      <div className=\"main-content\">\n        <LocationTitle city={city} selectedIndicator={false} pinClass={getIconFlag(city)} />\n        <div className=\"weather-main-content\">\n          { (showFullForecast)?\n            <WeatherForecast forecastData={forecastData} weatherType={weatherType}/>\n            :\n            <WeatherMain data={data} weatherType={weatherType} />\n          } \n        </div>\n        <div className=\"weather-main-actions\">\n          <button onClick={this.handleGetFullForecast} className=\"weather-button-show\">\n            {(showFullForecast) ?\n            \"ATR√ÅS\" :\n            \"PRON√ìSTICO COMPLETO\"\n            }\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nWeatherContent.propTypes = {\n  city: PropTypes.string.isRequired,\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }).isRequired,\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })).isRequired,\n}\n\nexport default WeatherContent","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst WeatherExtraInfo = (props) => {\n    const { humidity, wind } = props\n    return (\n        <div className=\"weather-data-extra-info\">\n            <i className=\"wi wi-raindrop icon-humidity\"></i>\n            <span className=\"span-weather-extra-info\">  \n                {`Humedad: ${humidity} % `}\n            </span>\n            <br />\n            <i className=\"wi wi-cloudy-windy icon-wind\"></i> \n            <span className=\"span-weather-extra-info\">    \n                {`Viento: ${wind} m/s`}\n            </span>\n        </div>\n    )   \n}\n\nWeatherExtraInfo.propType = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\nexport default WeatherExtraInfo","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherExtraInfo from './WeatherExtraInfo'\nimport { gradeAbbreviation, getIconByIdMaped, getGradeConversion } from '../../../utils/utils'\n\nclass WeatherTemperature extends Component {\n    render(){\n        const { temperature, weatherState, weatherType, humidity, wind, time } = this.props;\n        return (\n            <div className=\"weather-extra-info-current\">\n                <div className=\"weather-data-temperature\">\n                    <span className=\"span-temperature\">\n                        <i className={getIconByIdMaped(weatherState, time)}></i>\n                        {getGradeConversion(temperature, weatherType)}\n                        <span className=\"weather-type\"> {gradeAbbreviation(weatherType)}</span>\n                    </span>\n                </div>\n                <WeatherExtraInfo\n                    humidity={humidity}\n                    wind={wind}\n                />\n            </div>\n        )\n    }\n}\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherType: PropTypes.string.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n}\n\nexport default WeatherTemperature","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { \n    getDayOfTheWeek, \n    gradeAbbreviation, \n    getIconByIdMaped, \n    getAbbreviateDate,\n    getGradeConversion } from '../../../utils/utils'\n\nconst WeatherForecast = (props) => {\n  const data = props.data\n  const weatherType = props.weatherType\n  return (\n    <div className=\"weather-extra-info-forecast\">\n      <div className=\"weather-forecast-list active\">\n        { \n          data.map((dayForecast) => {\n          const { temperature, weatherState, time } = dayForecast\n          const formatedDate = new Date(time)\n          return <div key={temperature + '-' + time} className=\"weather-forecast\">\n            <div className=\"weather-forecast-day\">\n            { getDayOfTheWeek(formatedDate.getDay()) + ' ' + getAbbreviateDate(formatedDate)}\n            </div>\n            <div className=\"weather-forecast-temperature\">\n              <i className={getIconByIdMaped(weatherState, time) + ' icon-forecast'}></i>\n              {getGradeConversion(temperature, weatherType)}\n              <span className=\"weather-forecast-type\"> {gradeAbbreviation(weatherType)}</span>\n            </div>\n          </div>\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nWeatherForecast.propType = {\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temperature: PropTypes.number.isRequired,\n      weatherType: PropTypes.string.isRequired,\n      weatherState: PropTypes.number.isRequired,\n      max_temperature: PropTypes.number.isRequired,\n      min_temperature: PropTypes.number.isRequired,\n      time: PropTypes.instanceOf(Date).isRequired,\n    })\n  ).isRequired\n  \n}\nexport default WeatherForecast","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst WeatherBottom = (props) => {\n  const handleForecastVisibility = props.handleForecastVisibility\n  return (\n    <div className=\"weather-bottom-info-container\">\n      <button \n        className=\"weather-button-show\" \n        onClick={() =>{ handleForecastVisibility() }}>\n           SIGUIENTE 5 D√çAS \n        </button>\n    </div>   \n  )\n}\n\nWeatherBottom.propType = {\n  handleForecastVisibility: PropTypes.string.isRequired,\n}\nexport default WeatherBottom","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {getNext5DaysForecastData} from '../../../utils/utils'\nimport WeatherTemperature from './WeatherTemperature'\nimport WeatherForecast from './WeatherForecast'\nimport WeatherBottom from './WeatherBottom'\nimport './style.css'\n\n\nclass WeatherData extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            data: props.data,\n            weatherType: props.weatherType,\n            forecastData: props.forecastData,\n            forecastVisibility: false,\n            onSelectLocation: props.onSelectLocation\n        }\n        this.onSelectLocation = props.onSelectLocation\n        this.selectLocation = this.selectLocation.bind(this)\n        this.handleForecastVisibility = this.handleForecastVisibility.bind(this)\n    }\n    handleForecastVisibility(){\n        this.setState({\n            forecastVisibility: !this.state.forecastVisibility\n        })\n    }\n    selectLocation(city, data, forecastData){\n        this.onSelectLocation(city, data, forecastData)\n    }\n    render(){\n        const forecastVisibility = this.state.forecastVisibility\n        const {city, data, weatherType } = this.props\n        const { temperature, weatherState, humidity, wind, time } = data\n        const forecastData = this.props.forecastData;\n        const fiveDaysForecastData = getNext5DaysForecastData(forecastData);\n        return (\n            <div className=\"weather-extra-info-container\">\n                <div onClick={() => { this.selectLocation(city, data, forecastData) }}>\n                    {\n                        (!forecastVisibility) ?\n                            <WeatherTemperature\n                                temperature={temperature}\n                                weatherType={weatherType}\n                                weatherState={weatherState}\n                                humidity={humidity}\n                                wind={wind}\n                                time={time}\n                            />\n                            :\n                            <WeatherForecast\n                                data={fiveDaysForecastData}\n                                weatherType={weatherType}\n                                weatherState={weatherState}\n                            />\n                    }\n                </div>\n                <WeatherBottom \n                handleForecastVisibility={this.handleForecastVisibility}/> \n            </div>\n        )\n    }\n}\n\n\nWeatherData.propTypes = {\n    city: PropTypes.string.isRequired,\n    weatherType: PropTypes.string.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.number.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.number.isRequired,\n        max_temperature: PropTypes.number,\n        min_temperature: PropTypes.number,\n        pressure: PropTypes.number,\n        sunrise: PropTypes.number,\n        sunset: PropTypes.number,\n        time: PropTypes.number.isRequired\n    }).isRequired,\n    forecastData: PropTypes.arrayOf(PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.number.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.number.isRequired,\n        max_temperature: PropTypes.number.isRequired,\n        min_temperature: PropTypes.number.isRequired,\n        pressure: PropTypes.number.isRequired,\n        time: PropTypes.number.isRequired\n    })).isRequired\n}\n\nexport default WeatherData","\nimport { WEATHER_TYPE_CELSIUS } from '../constants/weather'\nimport { gradeConverterFromKelvin, getTimeFromUnixTimestamp } from '../utils/utils'\n\nconst CURRENT = 'weather';\nconst FORECAST = 'forecast';\n\nconst BASE_API_URL = 'https://api.openweathermap.org/data/2.5/'\nconst WEATHER_APP_ID = process.env.REACT_APP_OPENWEATHERMAP_APPID\n\nconst getUrlCurrentDataByCity = (city, country) => `${BASE_API_URL}${CURRENT}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nconst getUrlCurrentDataByCoordinates = (latitude, longitude) => `${BASE_API_URL}${CURRENT}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\n\nconst getUrlForecastDataByCity = (city, country) => `${BASE_API_URL}${FORECAST}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nconst getUrlForecastDataByCoordinates = (latitude, longitude) => `${BASE_API_URL}${FORECAST}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\n\nconst getCurrentDataByCoordinates = (latitude, longitude) =>{\n  const URL = getUrlCurrentDataByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const weatherData = handleResponse(response)\n        resolve(weatherData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nconst getCurrentDataByCity = (city, country) =>{\n  const URL = getUrlCurrentDataByCity(city.split(',')[0], country)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const weatherData = handleResponse(response)\n        resolve(weatherData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\n\nconst getForecastDataByCoordinates = (latitude, longitude) => {\n  const URL = getUrlForecastDataByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject) => {\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const forecastData = response.list.map((dayForecast) => {\n          const formatedResponse = handleResponse(dayForecast)\n          return formatedResponse.data\n        })\n        resolve(forecastData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nconst getForecastDataByCity = (city, country) => {\n  const URL = getUrlForecastDataByCity(city, country)\n  return new Promise((resolve, reject) => {\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        if (!isError(response)){\n          resolve(\n            response.list.map((dayForecast) => {\n              dayForecast.name = city\n              dayForecast.sys.country = country\n              const formatedResponse = handleResponse(dayForecast)\n              return formatedResponse.data\n            })\n          )\n        } else {\n          reject(handleResponse(response))\n        }\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nfunction handleResponse(response){\n  if(!isError(response)){\n    return {\n      city: `${response.name}, ${response.sys.country}`,\n      data: {\n        temperature: gradeConverterFromKelvin(response.main.temp, WEATHER_TYPE_CELSIUS),\n        weatherState: response.weather[0].id,\n        humidity: response.main.humidity,\n        wind: parseInt(parseInt(response.wind.speed, 10).toFixed(2), 10),\n        max_temperature: gradeConverterFromKelvin(response.main.temp_max, WEATHER_TYPE_CELSIUS),\n        min_temperature: gradeConverterFromKelvin(response.main.temp_min, WEATHER_TYPE_CELSIUS),\n        pressure: response.main.pressure,\n        deg: response.wind.deg,\n        sunrise: response.sys.sunrise,\n        sunset: response.sys.sunset,\n        time: getTimeFromUnixTimestamp(response.dt)\n      }\n    }\n  } else {\n    return {\n      error: 'Parece que ocurre un error consultando el servidor. Intente m√°s tarde. OpenWeatherMap.',\n      cod: (response.hasOwnProperty(\"cod\"))? response.cod : \"\"\n    }\n  }\n  \n}\n\n\nfunction isError(response){\n  if(response.hasOwnProperty(\"list\") || response.hasOwnProperty(\"main\")){\n    return false\n  }\n  return true\n}\n\nconst OpenWeatherMap = {\n  getCurrentDataByCity,\n  getForecastDataByCity,\n  getCurrentDataByCoordinates,\n  getForecastDataByCoordinates\n}\n\nexport default OpenWeatherMap","import React, { Component } from 'react'\nimport LocationTitle from './LocationTitle'\nimport WeatherData from './WeatherData'\nimport OpenWeatherMap from '../../services/openweathermap'\nimport { data, forecastData } from '../../constants/weather'\nimport './style.css'\n\n\nclass WeatherLocation extends Component {\n    constructor({ weatherType, city, country, onSelectLocation}){\n        super();\n        this.state = {\n            error: null,\n            message: null,\n            type: weatherType,\n            city: city,\n            country: country,\n            data: data,\n            forecastData: forecastData,\n            cssClass: 'weather-container',\n        }\n        this.onSelectLocation = onSelectLocation;\n        this.selectLocation = this.selectLocation.bind(this)\n    }\n    componentWillMount(){\n        OpenWeatherMap.getCurrentDataByCity(this.state.city, this.state.country)\n        .then(({city, data})=>{\n            OpenWeatherMap.getForecastDataByCity(this.state.city, this.state.country)\n                .then((forecastData) => {\n                    if (this.props.index === 0) {\n                        this.selectLocation(city, data, forecastData)\n                    }\n                    this.setState({\n                        city,\n                        data,\n                        forecastData\n                    })\n                })\n                .catch((error)=>{\n                    this.setState({\n                        error: true,\n                        message: error\n                    })\n                })\n        })     \n    }\n    selectLocation(city, data, forecastData){\n        this.onSelectLocation(city, data, forecastData)\n    }\n\n    render(){\n        const { weatherType, selectedCity } = this.props\n        const { city, data, forecastData, cssClass } = this.state;\n        return (\n            <div className={`${cssClass}`} >\n                <LocationTitle city={city} selectedIndicator={(city === selectedCity) ? true : false} pinClass=\"fa fa-map-marker icon-pin map-pin\" />\n                <WeatherData\n                    weatherType={weatherType}\n                    city={city}\n                    data={data}\n                    onSelectLocation={this.selectLocation}\n                    forecastData={forecastData}\n                    selectedCity={selectedCity}\n                />\n            </div>\n        )\n        \n    }\n} \n\n\n\nexport default WeatherLocation","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherLocation from './index'\nimport './style.css'\n\nclass LocationList extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      cities: props.cities,\n      weatherType: props.weatherType,\n      selectedCity: props.selectedCity\n    }\n    this.onSelectLocation = props.onSelectLocation\n    this.handleSelectLocation = this.handleSelectLocation.bind(this)\n  }\n  \n  handleSelectLocation(city, data, forecastData){\n    this.onSelectLocation(city, data, forecastData)\n    this.setState({\n      selectedCity: city\n    }) \n  }\n\n  render(){\n    const { selectedCity } = this.state\n    const { data, forecastData, weatherType, cities } = this.props\n    return (\n      <div className=\"list-cities\">\n        {\n          cities.map((city, index) => {\n            return <WeatherLocation\n              key={city.join(', ')}\n              city={city[0]}\n              country={city[1]}\n              data={data}\n              forecastData={forecastData}\n              index={index}\n              onSelectLocation={(city, data, forecastData) => { this.handleSelectLocation(city, data, forecastData)}}\n              weatherType={weatherType}\n              selectedCity={selectedCity}\n            />\n          })\n        }\n      </div>\n    )\n  }\n \n}\n\nLocationList.propTypes = {\n  cities: PropTypes.array.isRequired,\n  onSelectLocation: PropTypes.func.isRequired,\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }),\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })),\n}\n\nexport default LocationList","const BASE_API_URL = \"https://maps.googleapis.com/maps/api/\"\nconst GEOCODE_SERVICE = \"geocode\"\nconst GOOGLE_APP_ID = process.env.REACT_APP_GOOGLE_APPID\n\nconst getUrlGeocodeByCoordinates = (latitude, longitude) => `${BASE_API_URL}${GEOCODE_SERVICE}/json?latlng=${latitude},${longitude}&key=${GOOGLE_APP_ID}`\n\n\nexport const getCitiesByCoordinates = (latitude, longitude) => {\n  const URL = getUrlGeocodeByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n    .then((response)=> response.json())\n    .then((cities)=> {\n      if(isNotError(cities)){\n        const formatedCities = cities.results[0]['address_components'].filter((addresses) => {\n          return addresses.types.includes('political') && (!addresses.types.includes('neighborhood') && !addresses.types.includes('administrative_area_level_1') && !addresses.types.includes('administrative_area_level_2') && !addresses.types.includes('country'))\n        })\n        resolve(formatedCities)\n      } else {\n        reject({\n          error: 'Parece que ocurre un error consultando el servidor. Intente m√°s tarde. Google.'\n        })\n      }\n    })\n    .catch((error)=> reject(error))  \n  })\n}\n\nconst isNotError = (response) => {return (response.status === \"OK\")? true : false}\n\n\nconst Google = {\n  getCitiesByCoordinates,\n}\n\nexport default Google","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport WeatherSettings from './components/WeatherSettings'\nimport WeatherContent from './components/WeatherContent'\nimport LocationList from './components/WeatherLocation/LocationList'\nimport Google from './services/google'\nimport { getIpLocation } from './services/ip'\nimport { WEATHER_TYPE_CELSIUS, data, forecastData } from './constants/weather'\nimport dotenv from 'dotenv'\nimport './App.css'\n\nconst predefinedCities = [\n    ['Caracas', ' VE'], \n    ['Buenos Aires', ' AR'], \n    ['Santiago', ' CL'],\n    ['Brasilia', ' BR'],\n    ['Bogota', ' CO'],\n    ['London', ' GB'],\n    ['Madrid', ' ES'],\n    ['Paris', ' FR'],\n    ['Berlin', ' GR'],\n    ['Tokio', ' JP'],\n    ['Shangai', ' CN'],\n    ['New York', ' EU'],\n    ['Washintong', ' EU']\n]\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      weatherType: WEATHER_TYPE_CELSIUS,\n      cities: [],\n      city: '',\n      country: '',\n      location: ``,\n      data: data,\n      forecastData: forecastData,\n      predefinedCities: predefinedCities,\n      error: false,\n      message: \"\"\n    }\n    dotenv.config()\n    this.changeWeatherType = this.changeWeatherType.bind(this)\n    this.selectLocation = this.selectLocation.bind(this)\n    this.getLocation = this.getLocation.bind(this)\n  }\n\n  changeWeatherType(wType){\n    this.setState({\n      weatherType: wType\n    })\n  }\n  selectLocation(location, data, forecastData){\n    this.setState({\n      location,\n      data,\n      forecastData\n    })\n  }\n  handleFade() {\n    const elem = ReactDOM.findDOMNode(this);\n    window.requestAnimationFrame(function () {\n      elem.style.transform = \"translateY(10px)\"\n      elem.style.transition = \"transform 1.5s\"\n    })\n  }\n  getLocation(){\n       \n  }\n\n  componentDidMount() {\n    this.handleFade()\n    getIpLocation()\n      .then(({ city, country, latitude, longitude }) => {\n        Google.getCitiesByCoordinates(latitude, longitude)\n          .then((cities) => {\n            const formatedCities = cities.map((city, i)=>{\n              return [city['long_name'], ` ${country}`]\n            })\n            this.setState({\n              location: `${city}, ${country}`,\n              city: city,\n              country: country,\n              cities: formatedCities\n            })\n          })\n      })\n  }\n\n  render() {\n    const { weatherType, location, data, forecastData, error, cities, predefinedCities } = this.state\n    return (\n      <div className=\"app-container\">\n        {\n          (error)?\n          <div>Ha ocurrido un error</div> \n          :\n          (cities.length === 0)?\n            <div className=\"loading-div\"><h3>Cargando</h3></div>\n            :\n            <div>\n                <WeatherSettings\n                  changeWeather={this.changeWeatherType}\n                  wType={weatherType}\n                  cities={predefinedCities}\n                  selectedCities={cities}\n                />\n                <WeatherContent\n                  city={location}\n                  data={data}\n                  forecastData={forecastData}\n                  weatherType={weatherType} />\n                <LocationList\n                  cities={cities}\n                  weatherType={weatherType}\n                  onSelectLocation={this.selectLocation}\n                  selectedCity={location}\n                />   \n            </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","const BASE_API_URL = \"https://ipapi.co/json/\"\n\nexport const getIpLocation = () => {\n  return new Promise((resolve, reject)=>{\n    fetch(BASE_API_URL)\n      .then( response => response.json())\n      .then( coords => resolve(coords))\n      .catch( error => reject(error))\n  })\n}\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.css';\nimport './styles/weather-icons/css/weather-icons.min.css'\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}