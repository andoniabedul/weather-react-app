{"version":3,"sources":["constants/weather.js","utils/utils.js","components/WeatherSettings/GradeType.js","components/WeatherSettings/index.js","components/WeatherLocation/LocationTitle.js","components/WeatherContent/WeatherMain.js","components/WeatherContent/WeatherHours.js","components/WeatherContent/WeatherForecast.js","components/WeatherContent/index.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/WeatherForecast.js","components/WeatherLocation/WeatherData/WeatherBottom.js","components/WeatherLocation/WeatherData/index.js","services/openweathermap.js","components/WeatherLocation/index.js","components/WeatherLocation/LocationList.js","services/google.js","App.js","services/ip.js","registerServiceWorker.js","index.js"],"names":["WEATHER_TYPE_CELSIUS","LIST_WEATHER_STATES_ID","TORMENTA","LLOVIZNA","LLUVIA","NIEVE","√ÅTMOSFERA","DESPEJADO","NUBES","data","temperature","weatherState","humidity","wind","max_temperature","min_temperature","pressure","deg","time","sunset","sunrise","forecastData","gradeConverterFromKelvin","grades","type","Math","round","getGradeConversion","gradeAbbreviation","abbr","getIconByIdMaped","id","sunOrMoon","Date","getHours","concat","getTimeFromUnixTimestamp","unixTimestamp","getDayOfTheWeek","day","getAbbreviateDate","date","getDate","getMonth","getDescriptionById","LIST_STATES","Object","keys","actualState","forEach","state","getDateForSun","formatedDate","today","getDay","getMinutes","getForecastbyDays","forecastList","formated","forecast","forecastDayWeek","hasOwnProperty","push","GradeType","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","wType","changeGrade","bind","assertThisInitialized","changeWeather","setState","react_default","a","createElement","className","onChange","checked","htmlFor","Component","WeatherSettings","WeatherSettings_GradeType","LocationTitle","city","pinClass","selectedIndicator","WeatherMain","weatherType","parseInt","strDate","toString","substring","toUpperCase","getFormatedDate","WeatherHours","_props$forecast","key","_","uniqueId","propType","PropTypes","arrayOf","shape","number","isRequired","string","instanceOf","WeatherForecast","selectedDay","selectDay","_this2","_this$props","byDays","daysOfWeek","map","css","onClick","WeatherContent_WeatherHours","WeatherContent","_ref","showFullForecast","handleGetFullForecast","WeatherLocation_LocationTitle","country","flag","split","toLowerCase","getIconFlag","WeatherContent_WeatherForecast","WeatherContent_WeatherMain","WeatherExtraInfo","WeatherTemperature","WeatherData_WeatherExtraInfo","dayForecast","WeatherBottom","handleForecastVisibility","WeatherData","forecastVisibility","onSelectLocation","selectLocation","FiveDaysForecastData","filter","getNext5DaysForecastData","WeatherData_WeatherForecast","WeatherData_WeatherTemperature","WeatherData_WeatherBottom","handleResponse","response","isError","error","cod","name","sys","main","temp","weather","speed","toFixed","temp_max","temp_min","dt","OpenWeatherMap","getCurrentDataByCity","URL","process","getUrlCurrentDataByCity","Promise","resolve","reject","fetch","then","res","json","weatherData","catch","getForecastDataByCity","getUrlForecastDataByCity","list","getCurrentDataByCoordinates","latitude","longitude","getUrlCurrentDataByCoordinates","getForecastDataByCoordinates","getUrlForecastDataByCoordinates","WeatherLocation","message","cssClass","_ref2","index","selectedCity","_this$state","WeatherLocation_WeatherData","LocationList","cities","handleSelectLocation","components_WeatherLocation","join","isNotError","status","Google","getCitiesByCoordinates","getUrlGeocodeByCoordinates","formatedCities","results","addresses","types","includes","App","location","dotenv","config","changeWeatherType","getLocation","elem","ReactDOM","findDOMNode","window","requestAnimationFrame","style","transform","transition","handleFade","coords","length","i","components_WeatherSettings","components_WeatherContent","WeatherLocation_LocationList","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","render","src_App_0","document","getElementById","origin","addEventListener","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ae4b6de4.chunk.js","sourcesContent":["export const WEATHER_APP_ID = '061f24cf3cde2f60644a8240302983f2'\nexport const BASE_API_URL = 'https://api.openweathermap.org/data/2.5/weather'\nexport const API_URL_BY_COORDINATES = (latitude, longitude) => `${BASE_API_URL}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\nexport const API_URL_BY_CITY = (city, country) => `${BASE_API_URL}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nexport const CLEAR_SKY = 'CLEAR SKY'\nexport const FEW_CLOUDS = 'FEW CLOUDS'\nexport const SCATTERED_CLOUDS = 'SCATTERED CLOUDS'\nexport const BROKEN_CLOUDS = 'BROKEN CLOUDS'\nexport const SHOWER_RAIN = 'SHOWER RAIN'\nexport const RAIN = 'RAIN'\nexport const THUNDERSTORM = 'THUNDERSTORM'\nexport const SNOW = 'SNOW'\nexport const MIST = 'MIST'\nexport const HAZE = 'HAZE'\nexport const FOG = 'FOG'\nexport const WEATHER_TYPE_CELSIUS = 'CELSIUS'\nexport const WEATHER_TYPE_FAHRENHEIT = 'FAHRENHEIT'\n\nexport const LIST_WEATHER_STATES_ID = {\n  \"TORMENTA\": [200, 232],\n  \"LLOVIZNA\": [300, 321],\n  \"LLUVIA\": [500, 531],\n  \"NIEVE\": [600, 622],\n  \"√ÅTMOSFERA\": [701, 781],\n  \"DESPEJADO\": [800, 800],\n  \"NUBES\": [801, 804]\n}\n\nexport const ID_THUNDERSTORM = [200, 232]\nexport const ID_DRIZZLE = [300, 321]\nexport const ID_RAIN = [500, 531]\nexport const ID_SNOW = [600, 622]\nexport const ID_ATMOSPHERE = [701, 781]\nexport const ID_CLEAR = [800, 800]\nexport const ID_CLOUDS = [801, 804]\nexport const HTTP_200_SUCCESS = \"200\" \n\nexport const data = { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 6.57, \"max_temperature\": 301.512, \"min_temperature\": 301.512, \"pressure\": 1011.82, \"deg\": 60.5004, \"time\": 1537741360, \"sunset\": 1537741360, \"sunrise\": 1537741360}\nexport const forecastData = [{ \"temperature\": 29, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.26, \"max_temperature\": 29, \"min_temperature\": 28, \"pressure\": 1011.38, \"deg\": 67.0176, \"time\": 1537741360 }, { \"temperature\": 29, \"weatherState\": 800, \"humidity\": 100, \"wind\": 6.88, \"max_temperature\": 29, \"min_temperature\": 28, \"pressure\": 1012.93, \"deg\": 75.5027, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 802, \"humidity\": 100, \"wind\": 6.32, \"max_temperature\": 28, \"min_temperature\": 27, \"pressure\": 1014.03, \"deg\": 80.0045, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.67, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.85, \"deg\": 83.5023, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.56, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.09, \"deg\": 83.5001, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 5.03, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.15, \"deg\": 87.0086, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.03, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.89, \"deg\": 60.5002, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.31, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.15, \"deg\": 47.0029, \"time\": 1537741360 }, { \"temperature\": 26, \"weatherState\": 500, \"humidity\": 100, \"wind\": 4.31, \"max_temperature\": 26, \"min_temperature\": 26, \"pressure\": 1010.92, \"deg\": 52.0033, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 2.48, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.33, \"deg\": 74.5062, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 2.12, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.78, \"deg\": 67.5021, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 0.97, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.57, \"deg\": 47.0011, \"time\": 1537741360 }, { \"temperature\": 26, \"weatherState\": 500, \"humidity\": 100, \"wind\": 0.45, \"max_temperature\": 26, \"min_temperature\": 26, \"pressure\": 1012.43, \"deg\": 111.001, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 1.47, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.44, \"deg\": 188.5, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 800, \"humidity\": 100, \"wind\": 0.76, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1014.1, \"deg\": 345.002, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 800, \"humidity\": 100, \"wind\": 2.86, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.27, \"deg\": 32.5018, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 802, \"humidity\": 100, \"wind\": 3.91, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1011.01, \"deg\": 71.5061, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 4.23, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.87, \"deg\": 80.5005, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.81, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.02, \"deg\": 83.5026, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 4.27, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.13, \"deg\": 95.0026, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 802, \"humidity\": 100, \"wind\": 3.41, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.19, \"deg\": 93.5004, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 500, \"humidity\": 100, \"wind\": 1.96, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.52, \"deg\": 119.501, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 0.92, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.56, \"deg\": 44.0032, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 1.62, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.71, \"deg\": 23.0004, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 4.51, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1010.95, \"deg\": 64.0089, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.57, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.91, \"deg\": 76.0018, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.72, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.7, \"deg\": 89.0038, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.21, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.55, \"deg\": 93.5011, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.11, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1011.67, \"deg\": 95.5003, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 6.41, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.28, \"deg\": 98.5032, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 98, \"wind\": 5.02, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.95, \"deg\": 78.001, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 5.37, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.96, \"deg\": 65.0002, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 6.63, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1011.38, \"deg\": 58.5024, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 801, \"humidity\": 100, \"wind\": 7.26, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.51, \"deg\": 74.0024, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 7.06, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1013.79, \"deg\": 81.0007, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 802, \"humidity\": 100, \"wind\": 6.51, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.69, \"deg\": 84.5049, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 803, \"humidity\": 100, \"wind\": 5.81, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1012.58, \"deg\": 88.0011, \"time\": 1537741360 }, { \"temperature\": 27, \"weatherState\": 803, \"humidity\": 100, \"wind\": 6, \"max_temperature\": 27, \"min_temperature\": 27, \"pressure\": 1013.9, \"deg\": 85.0021, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 500, \"humidity\": 100, \"wind\": 6.92, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1014.67, \"deg\": 77.0023, \"time\": 1537741360 }, { \"temperature\": 28, \"weatherState\": 800, \"humidity\": 100, \"wind\": 6.82, \"max_temperature\": 28, \"min_temperature\": 28, \"pressure\": 1012.8, \"deg\": 70.0002, \"time\": 1537741360 }]","import {\n  CLEAR_SKY,\n  FEW_CLOUDS,\n  SCATTERED_CLOUDS,\n  BROKEN_CLOUDS,\n  SHOWER_RAIN,\n  RAIN,\n  THUNDERSTORM,\n  SNOW,\n  MIST,\n  HAZE,\n  FOG,\n  ID_THUNDERSTORM,\n  ID_DRIZZLE,\n  ID_RAIN,\n  ID_SNOW,\n  ID_ATMOSPHERE,\n  ID_CLEAR,\n  ID_CLOUDS,\n  WEATHER_TYPE_CELSIUS,\n  WEATHER_TYPE_FAHRENHEIT,\n  LIST_WEATHER_STATES_ID\n} from '../constants/weather'\n\n/**\n * This function converts from kelvin to celsius or fahrenheit\n * @param   {number}  grades      Grades in kelvin.\n * @param   {string}  type        Type of temperature what it will be the response.\n * @return  {number}  Rounded result of the conversion.\n */\n\nexport const gradeConverterFromKelvin = (grades, type) => {\n  let temperature \n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      temperature = grades - 273.15;\n      break;\n    case WEATHER_TYPE_FAHRENHEIT:\n      temperature = grades * (9 / 5) + 32\n      break\n    default:\n      temperature = grades\n      break\n  }\n  return Math.round(temperature)\n}\n\nexport const getGradeConversion = (grades, type) => {\n  let temperature\n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      temperature = grades\n      break;\n    case WEATHER_TYPE_FAHRENHEIT:\n      temperature = grades * (9 / 5) + 32\n      break\n    default:\n      temperature = grades\n      break\n  }\n  return Math.round(temperature)\n}\n/**\n * This function give the abbreviation of the type of temperature\n * @param   {string}    type      [CELSIUS, FAHRENHEIT].\n * @return  {string}    Temperature abbreviation [C¬∫, F¬∫]\n */\n\nexport const gradeAbbreviation = (type) => {\n  let abbr = ''\n  switch (type) {\n    case WEATHER_TYPE_CELSIUS:\n      abbr = 'C¬∫'\n      break\n    case WEATHER_TYPE_FAHRENHEIT:\n      abbr = 'F¬∫'\n      break\n    default:\n      abbr = 'C¬∫'\n      break\n  }\n  return abbr\n}\n\n/**\n * This function give the navigator.geolocation.getCurrentPosition\n * @param   {options}    Options to get the current position\n * @return  {promise}    Object with latitude and longitude\n */\n\nexport const getPosition = (options) => {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  })\n}\n\n/**\n * This function give the icon class for selected state \n * @param   {weatherState}    Weather state of API response\n * @return  {icon}     String with icon class for the @param state \n */\nexport const getIcon = (state) => {\n  let icon = 'weather-icon wi '\n  switch (state) {\n    case CLEAR_SKY:\n      return icon += 'wi-day-sunny'\n    case FEW_CLOUDS:\n      return icon += 'wi-cloud'\n    case SCATTERED_CLOUDS:\n      return icon += 'wi-day-cloudy-high'\n    case BROKEN_CLOUDS:\n      return icon += 'wi-cloudy'\n    case SHOWER_RAIN:\n      return icon += 'wi-showers'\n    case RAIN:\n      return icon += 'wi-rain'\n    case THUNDERSTORM:\n      return icon += 'wi-thunderstorm'\n    case SNOW:\n      return icon += 'wi-snow'\n    case MIST:\n      return icon += 'wi-day-rain-mix'\n    case HAZE:\n      return icon += 'wi-day-haze'\n    case FOG:\n      return icon += 'wi-fog'\n    default:\n      return icon += 'wi-day-sunny'\n  }\n}\n/**\n * This function give the icon class for selected state \n * @param   {weatherStateId}    ID of Weather Conditions \n * @description SEE for more info https://openweathermap.org/weather-conditions\n * @return  {icon}     String with icon class for the @param id \n */\nexport const getIconById = (id) => { \n  const icon = 'weather-icon wi '\n  if (id >= ID_THUNDERSTORM[0] && id <= ID_THUNDERSTORM[1]){\n    return icon + 'wi-thunderstorm' \n  } else if (id >= ID_DRIZZLE[0] && id <= ID_DRIZZLE[1]) {\n    return icon + 'wi-day-rain-mix'\n  } else if (id >= ID_RAIN[0] && id <= ID_RAIN[1]) {\n    return icon + 'wi-rain'\n  } else if (id >= ID_SNOW[0] && id <= ID_SNOW[1]) {\n    return icon + 'wi-snow'\n  } else if (id >= ID_ATMOSPHERE[0] && id <= ID_ATMOSPHERE[1]) {\n    return icon + 'wi-day-haze'\n  } else if (id >= ID_CLEAR[0] && id <= ID_CLEAR[1]) {\n    return icon + 'wi-day-sunny'\n  } else if (id >= ID_CLOUDS[0] && id <= ID_CLOUDS[1]){\n    return icon + 'wi-cloud'\n  } else {\n    return icon + 'wi-day-sunny'\n  }\n}\n\n// YES! POR FIN ALGO SENCILLO Y EFICIENTE\nexport const getIconByIdMaped = (id, time) => {\n  let date = new Date(time)\n  const sunOrMoon = (date.getHours() > 18)? 'night' : 'day'\n  return `weather-icon wi wi-owm-${sunOrMoon}-${id}`  \n}\n\n/**\n * @param   {actualDate}    Timestamp of actual date \n * @description This function return the next five days given the @param date\n * @return  {Array}     Array with timestamps of the next five days \n */\n\nexport const getNext5Days = (actualDate) => {\n  let now = new Date(actualDate)\n  now.setDate(now.getDate() + 1)\n  const numberOfDays = 5\n  let next5Days = new Array(numberOfDays).fill(now)\n\n  return next5Days.map((day, i) => {\n    const nextDay = day.getDate() + i\n    const newDate = new Date(day).setDate(nextDay)\n    return newDate\n  })\n}\n\nexport const getTimeFromUnixTimestamp = (unixTimestamp) => {\n  return unixTimestamp * 1000\n}\n\nexport const getDayOfTheWeek = (day) => {\n  const week = ['DOM', 'LUN', 'MAR', 'MIE', 'JUE', 'VIE', 'SAB']\n  return week[day]\n}\n\nexport const getAbbreviateDate = (date) => {\n  return `${date.getDate()}/${date.getMonth() + 1}`\n}\n\nexport const getFormatedDate = (date) => {\n  const formatedDate = new Date(date)\n  const strDate = formatedDate.toString()\n  return `${strDate.substring(3, 15).toUpperCase()} `\n}\n\nexport const getDescriptionById = (id) => {\n  const LIST_STATES = Object.keys(LIST_WEATHER_STATES_ID)\n  let actualState = \"\"\n  LIST_STATES.forEach((state)=>{\n    if (id >= LIST_WEATHER_STATES_ID[state][0] && id <= LIST_WEATHER_STATES_ID[state][1]){\n      actualState = state\n    }\n  })\n  return actualState\n}\n\nexport const getIconFlag = (country) => {\n  const flag = country.split(\",\")[1].substring(1, 3).toLowerCase()\n  return `icon-pin em em-flag-${flag} flag-pin`\n}\n\nexport const getDateForSun = (date) => {\n  const formatedDate = new Date(getTimeFromUnixTimestamp(date));\n  const today = new Date();\n  if(formatedDate.getDay() === today.getDay()){\n    return `Hoy, ${(formatedDate.getHours() === 0) ? '00' : formatedDate.getHours()}:${formatedDate.getMinutes()}`;\n  } else {\n    return `Ma√±ana, ${(formatedDate.getHours() === 0) ? '00' : formatedDate.getHours()}:${formatedDate.getMinutes()}`\n  }\n}\n\nexport const getNext5DaysForecastData = (data) => {\n  return data.filter((forecast) => {\n    const time = new Date(forecast.time)\n    return time.getHours() === 23\n  })\n}\n\nexport const getForecastbyDays = (forecastList) => {\n  const formated = {}\n  forecastList.forEach((forecast)=>{\n    const forecastDayWeek = new Date(forecast.time)\n    const day = getDayOfTheWeek(forecastDayWeek.getDay())\n    if(formated.hasOwnProperty(day)){\n      formated[day].push(forecast)\n    } else {\n      formated[day] = [forecast]\n    }\n  })\n  return formated\n}\n\nexport const getFormatedCity = (city)=>{\n  return [city.split(',')[0], city.split(',')[1].substring(1)]\n}","import React, { Component } from 'react'\nimport {WEATHER_TYPE_CELSIUS, WEATHER_TYPE_FAHRENHEIT } from '../../constants/weather'\nimport { gradeAbbreviation } from '../../utils/utils'\n\n\nclass GradeType extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: props.wType,\n    }\n    this.changeGrade = this.changeGrade.bind(this)\n    this.changeWeather = props.changeWeather\n  }\n  \n  changeGrade(){\n    if(this.state.type === WEATHER_TYPE_CELSIUS){\n      this.setState({\n        type: WEATHER_TYPE_FAHRENHEIT\n      })\n    } else {\n      this.setState({\n        type: WEATHER_TYPE_CELSIUS\n      })\n    }\n    this.changeWeather(this.state.type)\n  }\n  componentDidMount(){\n    this.changeGrade()\n  }\n  render(){\n    return (\n      <div className=\"weather-grade-type\">\n        <input \n          onChange={this.changeGrade} \n          id=\"cmn-toggle-4\" \n          className=\"cmn-toggle cmn-toggle-round-flat\" \n          type=\"checkbox\" \n          checked={(this.state.type === WEATHER_TYPE_CELSIUS? true : false)} \n        />\n        <label htmlFor=\"cmn-toggle-4\">\n          {\n            (this.state.type === WEATHER_TYPE_CELSIUS) ?\n              gradeAbbreviation(WEATHER_TYPE_CELSIUS)\n              :\n              gradeAbbreviation(WEATHER_TYPE_FAHRENHEIT)\n          }\n        </label>\n      </div>\n    )\n  }\n}\n\n\nexport default GradeType","import React from 'react'\nimport GradeType from './GradeType'\n\n\nconst WeatherSettings = (props)=>(\n  <div className=\"weather-settings\">\n    <span className=\"menu-title\">\n      Weather App\n    </span>  \n    <GradeType changeWeather={props.changeWeather} wType={props.wType} />\n  </div>\n)\n\nexport default WeatherSettings","import React from 'react'\nimport PropType from 'prop-types'\nimport './style.css'\n\nconst LocationTitle = (props) => {\n    const { city, pinClass, selectedIndicator } = props\n    return (\n        <div> \n            <h1 className={`weather-title-primary`}>\n                <i className={`${pinClass}`}></i>\n                  {city}\n                {\n                    (selectedIndicator)?\n                    <span className=\"arrow-right\"></span>\n                    :\n                    \"\"\n                } \n                \n            </h1>\n            \n        </div>\n    )\n}\n\nLocationTitle.propTypes = {\n    city: PropType.string.isRequired,\n}\n\nexport default LocationTitle","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { gradeAbbreviation, getGradeConversion, getDescriptionById, getIconByIdMaped, getDateForSun, getFormatedDate } from '../../utils/utils'\nimport './style.css'\n\nconst WeatherMain = (props) => {\n  const { data, weatherType } = props\n  return (\n        <div className=\"weather-current-content\">\n          <span className=\"weather-main-description\">\n            { \n                (data.wind > 5)?\n              `${getDescriptionById(data.weatherState)} CON VIENTO`\n              :\n              getDescriptionById(data.weatherState)\n            }\n          </span>\n          <div className=\"weather-main-temp\">\n            <i className={getIconByIdMaped(data.weatherState, data.time)}></i>\n            {getGradeConversion(data.temperature, weatherType)}\n            <span className=\"weather-type\"> {gradeAbbreviation(weatherType)}</span>\n          </div>\n          <div className=\"weather-main-info\">\n            <div className=\"weather-main-info-left\">\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-raindrop\"></i>Humedad: {data.humidity} %</h2>\n              <h2 className=\"weather-main-item\"><i className={`icons-main-content wi wi-wind-beaufort-${parseInt(data.wind, 10)}`}></i>Viento: {data.wind} m/s</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-barometer\"></i>Presi√≥n: {data.pressure} bar</h2>\n            </div>\n            <div className=\"weather-main-info-right\">\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-sunset\"></i>Puesta: {getDateForSun(data.sunset)}</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content wi wi-sunrise\"></i>Salida: {getDateForSun(data.sunrise)}</h2>\n              <h2 className=\"weather-main-item\"><i className=\"icons-main-content fa fa-calendar\"></i>Fecha: {getFormatedDate(data.time)}</h2>\n            </div>\n          </div>\n        </div>\n  )\n}\nWeatherMain.propTypes = {\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }).isRequired\n}\nexport default WeatherMain","import React from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport { gradeAbbreviation, getGradeConversion, getIconByIdMaped } from '../../utils/utils'\nimport './style.css'\n\nconst WeatherHours = (props) => {\n    const { temperature, weatherState, time, humidity, wind, pressure } = props.forecast\n    const weatherType = props.weatherType\n    const formatedDate = new Date(time)\n    return (<div key={_.uniqueId(\"hours_\")} className=\"weather-forecast-main\">\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content fa fa-clock-o\"></i>{formatedDate.getHours()}:00</span>\n        <span className=\"weather-forecast-item\"> <i className={getIconByIdMaped(weatherState, time) + ' icon-forecast'}></i>{getGradeConversion(temperature, weatherType) + ' ' + gradeAbbreviation(weatherType)}</span>\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content wi wi-raindrop\"></i>{humidity} %</span>\n        <span className=\"weather-forecast-item\"><i className={`icons-main-content wi wi-wind-beaufort-${parseInt(wind, 10)}`}></i>{wind} m/s</span>\n        <span className=\"weather-forecast-item\"><i className=\"icons-main-content wi wi-barometer\"></i>{pressure} bar</span>\n      <br />\n    </div>)\n}\n\nWeatherHours.propType = {\n  forecast: PropTypes.arrayOf(\n    PropTypes.shape({\n      temperature: PropTypes.number.isRequired,\n      weatherType: PropTypes.string.isRequired,\n      weatherState: PropTypes.number.isRequired,\n      humidity: PropTypes.number.isRequired,\n      wind: PropTypes.number.isRequired,\n      pressure: PropTypes.number.isRequired,\n      time: PropTypes.instanceOf(Date).isRequired,\n    })\n  )\n\n}\n\nexport default WeatherHours","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport _ from 'lodash'\nimport WeatherHours from './WeatherHours'\nimport { getAbbreviateDate, getForecastbyDays } from '../../utils/utils'\nimport './style.css'\n\nclass WeatherForecast extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      selectedDay: Object.keys(getForecastbyDays(props.forecastData))[0],\n    }\n    this.selectDay = this.selectDay.bind(this)\n  }\n  selectDay(day){\n    this.setState({\n      selectedDay: day\n    })\n  }\n  render(){\n    const { selectedDay } = this.state\n    const { forecastData, weatherType } = this.props\n    const byDays = getForecastbyDays(forecastData)\n    const daysOfWeek = Object.keys(byDays)\n    return (\n      <div className=\"weather-forecast-content\">\n        <div className=\"weather-forecast-days-list\">\n          {\n            daysOfWeek.map((day) => {\n              const date = getAbbreviateDate(new Date(byDays[day][0]['time']))\n              const css = (day === selectedDay)? \" active\" : \"\"\n              \n              return <div\n                key={_.uniqueId(`main_forecast_${day}_`)}\n                onClick={() => { this.selectDay(day) }}\n                className={`weather-forecast-days ${css}`}>\n                {day}\n                <br />\n                {date}\n              </div>\n            })\n          }\n        </div>\n        <div className=\"weather-forecast-hours-list\">\n          {\n            byDays[selectedDay].map((forecast) => {\n              return <WeatherHours \n                key={_.uniqueId(`main_forecast_hours_`)}\n                forecast={forecast} \n                weatherType={weatherType} \n              />\n            })\n          }\n        </div>\n       \n        \n      </div>\n    )\n  }\n}\n\nWeatherForecast.propTypes = {\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })).isRequired,\n}\n\nexport default WeatherForecast","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport LocationTitle from '../WeatherLocation/LocationTitle'\nimport WeatherMain from './WeatherMain'\nimport WeatherForecast from './WeatherForecast'\nimport { getIconFlag } from '../../utils/utils'\nimport './style.css'\n\nclass WeatherContent extends Component {\n  constructor({ city, data, forecastData, weatherType }){\n    super()\n    this.state = { \n      city, \n      data, \n      forecastData, \n      weatherType,\n      showFullForecast: false\n    }\n    this.handleGetFullForecast = this.handleGetFullForecast.bind(this)\n  }\n  handleGetFullForecast(){\n    this.setState({\n      showFullForecast: !this.state.showFullForecast\n    })\n  }\n\n  render(){\n    const { showFullForecast } = this.state\n    const {  weatherType, city, data, forecastData } = this.props\n    return (\n      <div className=\"main-content\">\n        <LocationTitle city={city} selectedIndicator={false} pinClass={getIconFlag(city)} />\n        <div className=\"weather-main-content\">\n          { (showFullForecast)?\n            <WeatherForecast forecastData={forecastData} weatherType={weatherType}/>\n            :\n            <WeatherMain data={data} weatherType={weatherType} />\n          } \n        </div>\n        <div className=\"weather-main-actions\">\n          <button onClick={this.handleGetFullForecast} className=\"weather-button-show\">\n            {(showFullForecast) ?\n            \"ATR√ÅS\" :\n            \"PRON√ìSTICO COMPLETO\"\n            }\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nWeatherContent.propTypes = {\n  city: PropTypes.string.isRequired,\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }).isRequired,\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })).isRequired,\n}\n\nexport default WeatherContent","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst WeatherExtraInfo = (props) => {\n    const { humidity, wind } = props\n    return (\n        <div className=\"weather-data-extra-info\">\n            <i className=\"wi wi-raindrop icon-humidity\"></i>\n            <span className=\"span-weather-extra-info\">  \n                {`Humedad: ${humidity} % `}\n            </span>\n            <br />\n            <i className=\"wi wi-cloudy-windy icon-wind\"></i> \n            <span className=\"span-weather-extra-info\">    \n                {`Viento: ${wind} m/s`}\n            </span>\n        </div>\n    )   \n}\n\nWeatherExtraInfo.propType = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\nexport default WeatherExtraInfo","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherExtraInfo from './WeatherExtraInfo'\nimport { gradeAbbreviation, getIconByIdMaped, getGradeConversion } from '../../../utils/utils'\n\nclass WeatherTemperature extends Component {\n    render(){\n        const { temperature, weatherState, weatherType, humidity, wind, time } = this.props;\n        return (\n            <div className=\"weather-extra-info-current\">\n                <div className=\"weather-data-temperature\">\n                    <span className=\"span-temperature\">\n                        <i className={getIconByIdMaped(weatherState, time)}></i>\n                        {getGradeConversion(temperature, weatherType)}\n                        <span className=\"weather-type\"> {gradeAbbreviation(weatherType)}</span>\n                    </span>\n                </div>\n                <WeatherExtraInfo\n                    humidity={humidity}\n                    wind={wind}\n                />\n            </div>\n        )\n    }\n}\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number.isRequired,\n    weatherType: PropTypes.string.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n}\n\nexport default WeatherTemperature","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { \n    getDayOfTheWeek, \n    gradeAbbreviation, \n    getIconByIdMaped, \n    getAbbreviateDate,\n    getGradeConversion } from '../../../utils/utils'\n\nconst WeatherForecast = (props) => {\n  const data = props.data\n  const weatherType = props.weatherType\n  return (\n    <div className=\"weather-extra-info-forecast\">\n      <div className=\"weather-forecast-list active\">\n        { \n          data.map((dayForecast) => {\n          const { temperature, weatherState, time } = dayForecast\n          const formatedDate = new Date(time)\n          return <div key={temperature + '-' + time} className=\"weather-forecast\">\n            <div className=\"weather-forecast-day\">\n            { getDayOfTheWeek(formatedDate.getDay()) + ' ' + getAbbreviateDate(formatedDate)}\n            </div>\n            <div className=\"weather-forecast-temperature\">\n              <i className={getIconByIdMaped(weatherState, time) + ' icon-forecast'}></i>\n              {getGradeConversion(temperature, weatherType)}\n              <span className=\"weather-forecast-type\"> {gradeAbbreviation(weatherType)}</span>\n            </div>\n          </div>\n          })\n        }\n      </div>\n    </div>\n  )\n}\n\nWeatherForecast.propType = {\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      temperature: PropTypes.number.isRequired,\n      weatherType: PropTypes.string.isRequired,\n      weatherState: PropTypes.number.isRequired,\n      max_temperature: PropTypes.number.isRequired,\n      min_temperature: PropTypes.number.isRequired,\n      time: PropTypes.instanceOf(Date).isRequired,\n    })\n  ).isRequired\n  \n}\nexport default WeatherForecast","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst WeatherBottom = (props) => {\n  const handleForecastVisibility = props.handleForecastVisibility\n  return (\n    <div className=\"weather-bottom-info-container\">\n      <button \n        className=\"weather-button-show\" \n        onClick={() =>{ handleForecastVisibility() }}>\n           SIGUIENTE 5 D√çAS \n        </button>\n    </div>   \n  )\n}\n\nWeatherBottom.propType = {\n  handleForecastVisibility: PropTypes.string.isRequired,\n}\nexport default WeatherBottom","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport {getNext5DaysForecastData} from '../../../utils/utils'\nimport WeatherTemperature from './WeatherTemperature'\nimport WeatherForecast from './WeatherForecast'\nimport WeatherBottom from './WeatherBottom'\nimport './style.css'\n\n\nclass WeatherData extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            data: props.data,\n            weatherType: props.weatherType,\n            forecastData: props.forecastData,\n            forecastVisibility: false,\n            onSelectLocation: props.onSelectLocation\n        }\n        this.onSelectLocation = props.onSelectLocation\n        this.selectLocation = this.selectLocation.bind(this)\n        this.handleForecastVisibility = this.handleForecastVisibility.bind(this)\n    }\n    handleForecastVisibility(){\n        this.setState({\n            forecastVisibility: !this.state.forecastVisibility\n        })\n    }\n    selectLocation(city, data, forecastData){\n        this.onSelectLocation(city, data, forecastData)\n    }\n    render(){\n        const forecastVisibility = this.state.forecastVisibility\n        const {city, data, weatherType } = this.props\n        const { temperature, weatherState, humidity, wind, time } = data\n        const forecastData = this.props.forecastData\n        const FiveDaysForecastData = getNext5DaysForecastData(forecastData)\n        return (\n            <div className=\"weather-extra-info-container\">\n                <div onClick={() => { this.selectLocation(city, data, forecastData) }}>\n                    {\n                        (!forecastVisibility) ?\n                            <WeatherTemperature\n                                temperature={temperature}\n                                weatherType={weatherType}\n                                weatherState={weatherState}\n                                humidity={humidity}\n                                wind={wind}\n                                time={time}\n                            />\n                            :\n                            <WeatherForecast\n                                data={FiveDaysForecastData}\n                                weatherType={weatherType}\n                                weatherState={weatherState}\n                            />\n                    }\n                </div>\n                <WeatherBottom \n                handleForecastVisibility={this.handleForecastVisibility}/> \n            </div>\n        )\n    }\n}\n\n\nWeatherData.propTypes = {\n    city: PropTypes.string.isRequired,\n    weatherType: PropTypes.string.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.number.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.number.isRequired,\n        max_temperature: PropTypes.number,\n        min_temperature: PropTypes.number,\n        pressure: PropTypes.number,\n        sunrise: PropTypes.number,\n        sunset: PropTypes.number,\n        time: PropTypes.number.isRequired\n    }).isRequired,\n    forecastData: PropTypes.arrayOf(PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.number.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.number.isRequired,\n        max_temperature: PropTypes.number.isRequired,\n        min_temperature: PropTypes.number.isRequired,\n        pressure: PropTypes.number.isRequired,\n        time: PropTypes.number.isRequired\n    })).isRequired\n}\n\nexport default WeatherData","\nimport { WEATHER_TYPE_CELSIUS } from '../constants/weather'\nimport { gradeConverterFromKelvin, getTimeFromUnixTimestamp } from '../utils/utils'\n\nconst CURRENT = 'weather';\nconst FORECAST = 'forecast';\n\nconst BASE_API_URL = 'https://api.openweathermap.org/data/2.5/'\nconst WEATHER_APP_ID = process.env.REACT_APP_OPENWEATHERMAP_APPID\n\nconst getUrlCurrentDataByCity = (city, country) => `${BASE_API_URL}${CURRENT}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nconst getUrlCurrentDataByCoordinates = (latitude, longitude) => `${BASE_API_URL}${CURRENT}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\n\nconst getUrlForecastDataByCity = (city, country) => `${BASE_API_URL}${FORECAST}?q=${city},${country}&APPID=${WEATHER_APP_ID}`\nconst getUrlForecastDataByCoordinates = (latitude, longitude) => `${BASE_API_URL}${FORECAST}?lat=${latitude}&lon=${longitude}&APPID=${WEATHER_APP_ID}`\n\nconst getCurrentDataByCoordinates = (latitude, longitude) =>{\n  const URL = getUrlCurrentDataByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const weatherData = handleResponse(response)\n        resolve(weatherData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nconst getCurrentDataByCity = (city, country) =>{\n  const URL = getUrlCurrentDataByCity(city.split(',')[0], country)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const weatherData = handleResponse(response)\n        resolve(weatherData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\n\nconst getForecastDataByCoordinates = (latitude, longitude) => {\n  const URL = getUrlForecastDataByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject) => {\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        const forecastData = response.list.map((dayForecast) => {\n          const formatedResponse = handleResponse(dayForecast)\n          return formatedResponse.data\n        })\n        resolve(forecastData)\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nconst getForecastDataByCity = (city, country) => {\n  const URL = getUrlForecastDataByCity(city, country)\n  return new Promise((resolve, reject) => {\n    fetch(URL)\n      .then((res) => res.json())\n      .then((response) => {\n        if (!isError(response)){\n          resolve(\n            response.list.map((dayForecast) => {\n              dayForecast.name = city\n              dayForecast.sys.country = country\n              const formatedResponse = handleResponse(dayForecast)\n              return formatedResponse.data\n            })\n          )\n        } else {\n          reject(handleResponse(response))\n        }\n      })\n      .catch((error) => reject(error))\n  });\n}\n\nfunction handleResponse(response){\n  if(!isError(response)){\n    return {\n      city: `${response.name}, ${response.sys.country}`,\n      data: {\n        temperature: gradeConverterFromKelvin(response.main.temp, WEATHER_TYPE_CELSIUS),\n        weatherState: response.weather[0].id,\n        humidity: response.main.humidity,\n        wind: parseInt(parseInt(response.wind.speed, 10).toFixed(2), 10),\n        max_temperature: gradeConverterFromKelvin(response.main.temp_max, WEATHER_TYPE_CELSIUS),\n        min_temperature: gradeConverterFromKelvin(response.main.temp_min, WEATHER_TYPE_CELSIUS),\n        pressure: response.main.pressure,\n        deg: response.wind.deg,\n        sunrise: response.sys.sunrise,\n        sunset: response.sys.sunset,\n        time: getTimeFromUnixTimestamp(response.dt)\n      }\n    }\n  } else {\n    return {\n      error: 'Parece que ocurre un error consultando el servidor. Intente m√°s tarde. OpenWeatherMap.',\n      cod: (response.hasOwnProperty(\"cod\"))? response.cod : \"\"\n    }\n  }\n  \n}\n\n\nfunction isError(response){\n  if(response.hasOwnProperty(\"list\") || response.hasOwnProperty(\"main\")){\n    return false\n  }\n  return true\n}\n\nconst OpenWeatherMap = {\n  getCurrentDataByCity,\n  getForecastDataByCity,\n  getCurrentDataByCoordinates,\n  getForecastDataByCoordinates\n}\n\nexport default OpenWeatherMap","import React, { Component } from 'react'\nimport LocationTitle from './LocationTitle'\nimport WeatherData from './WeatherData'\nimport OpenWeatherMap from '../../services/openweathermap'\nimport { data, forecastData } from '../../constants/weather'\nimport './style.css'\n\n\nclass WeatherLocation extends Component {\n    constructor({ weatherType, city, country, onSelectLocation}){\n        super();\n        this.state = {\n            error: null,\n            message: null,\n            type: weatherType,\n            city: city,\n            country: country,\n            data: data,\n            forecastData: forecastData,\n            cssClass: 'weather-container',\n        }\n        this.onSelectLocation = onSelectLocation;\n        this.selectLocation = this.selectLocation.bind(this)\n    }\n    componentWillMount(){\n        OpenWeatherMap.getCurrentDataByCity(this.state.city, this.state.country)\n        .then(({city, data})=>{\n            OpenWeatherMap.getForecastDataByCity(this.state.city, this.state.country)\n                .then((forecastData) => {\n                    if (this.props.index === 0) {\n                        this.selectLocation(city, data, forecastData)\n                    }\n                    this.setState({\n                        city,\n                        data,\n                        forecastData\n                    })\n                })\n                .catch((error)=>{\n                    this.setState({\n                        error: true,\n                        message: error\n                    })\n                })\n        })     \n    }\n    selectLocation(city, data, forecastData){\n        this.onSelectLocation(city, data, forecastData)\n    }\n\n    render(){\n        const { weatherType, selectedCity } = this.props\n        const { city, data, forecastData, cssClass } = this.state;\n        return (\n            <div className={`${cssClass}`} >\n                <LocationTitle city={city} selectedIndicator={(city === selectedCity) ? true : false} pinClass=\"fa fa-map-marker icon-pin map-pin\" />\n                <WeatherData\n                    weatherType={weatherType}\n                    city={city}\n                    data={data}\n                    onSelectLocation={this.selectLocation}\n                    forecastData={forecastData}\n                    selectedCity={selectedCity}\n                />\n            </div>\n        )\n        \n    }\n} \n\n\n\nexport default WeatherLocation","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport WeatherLocation from './index'\nimport './style.css'\n\nclass LocationList extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      cities: props.cities,\n      weatherType: props.weatherType,\n      selectedCity: props.selectedCity\n    }\n    this.onSelectLocation = props.onSelectLocation\n    this.handleSelectLocation = this.handleSelectLocation.bind(this)\n  }\n  \n  handleSelectLocation(city, data, forecastData){\n    this.onSelectLocation(city, data, forecastData)\n    this.setState({\n      selectedCity: city\n    }) \n  }\n\n  render(){\n    const { selectedCity } = this.state\n    const { data, forecastData, weatherType, cities } = this.props\n    return (\n      <div className=\"list-cities\">\n        {\n          cities.map((city, index) => {\n            return <WeatherLocation\n              key={city.join(', ')}\n              city={city[0]}\n              country={city[1]}\n              data={data}\n              forecastData={forecastData}\n              index={index}\n              onSelectLocation={(city, data, forecastData) => { this.handleSelectLocation(city, data, forecastData)}}\n              weatherType={weatherType}\n              selectedCity={selectedCity}\n            />\n          })\n        }\n      </div>\n    )\n  }\n \n}\n\nLocationList.propTypes = {\n  cities: PropTypes.array.isRequired,\n  onSelectLocation: PropTypes.func.isRequired,\n  weatherType: PropTypes.string.isRequired,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    sunrise: PropTypes.number.isRequired,\n    sunset: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  }),\n  forecastData: PropTypes.arrayOf(PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.number.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.number.isRequired,\n    max_temperature: PropTypes.number.isRequired,\n    min_temperature: PropTypes.number.isRequired,\n    pressure: PropTypes.number.isRequired,\n    time: PropTypes.number.isRequired\n  })),\n}\n\nexport default LocationList","const BASE_API_URL = \"https://maps.googleapis.com/maps/api/\"\nconst GEOCODE_SERVICE = \"geocode\"\nconst GOOGLE_APP_ID = process.env.REACT_APP_GOOGLE_APPID\n\nconst getUrlGeocodeByCoordinates = (latitude, longitude) => `${BASE_API_URL}${GEOCODE_SERVICE}/json?latlng=${latitude},${longitude}&key=${GOOGLE_APP_ID}`\n\n\nexport const getCitiesByCoordinates = (latitude, longitude) => {\n  const URL = getUrlGeocodeByCoordinates(latitude, longitude)\n  return new Promise((resolve, reject)=>{\n    fetch(URL)\n    .then((response)=> response.json())\n    .then((cities)=> {\n      if(isNotError(cities)){\n        const formatedCities = cities.results[0]['address_components'].filter((addresses) => {\n          return addresses.types.includes('political')\n        })\n        resolve(formatedCities)\n      } else {\n        reject({\n          error: 'Parece que ocurre un error consultando el servidor. Intente m√°s tarde. Google.'\n        })\n      }\n    })\n    .catch((error)=> reject(error))  \n  })\n}\n\nconst isNotError = (response) => {return (response.status === \"OK\")? true : false}\n\n\nconst Google = {\n  getCitiesByCoordinates,\n}\n\nexport default Google","import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\nimport WeatherSettings from './components/WeatherSettings'\nimport WeatherContent from './components/WeatherContent'\nimport LocationList from './components/WeatherLocation/LocationList'\nimport Google from './services/google'\nimport { getIpLocation } from './services/ip'\nimport { WEATHER_TYPE_CELSIUS, data, forecastData } from './constants/weather'\nimport dotenv from 'dotenv'\nimport './App.css'\n\nconst cities = [\n    ['Caracas', 'VE'], \n    ['Buenos Aires', 'AR'], \n    ['Santiago', 'CL'],\n    ['Brasilia', 'BR'],\n    ['Bogota', 'CO'],\n    ['London', 'UK']\n]\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state = {\n      weatherType: WEATHER_TYPE_CELSIUS,\n      cities: [],\n      city: '',\n      country: '',\n      location: `${cities[0][0]}, ${cities[0][1]}`,\n      data: data,\n      forecastData: forecastData,\n      error: false,\n      message: \"\"\n    }\n    dotenv.config()\n    this.changeWeatherType = this.changeWeatherType.bind(this)\n    this.selectLocation = this.selectLocation.bind(this)\n    this.getLocation = this.getLocation.bind(this)\n  }\n\n  changeWeatherType(wType){\n    this.setState({\n      weatherType: wType\n    })\n  }\n  selectLocation(location, data, forecastData){\n    this.setState({\n      location,\n      data,\n      forecastData\n    })\n  }\n  handleFade() {\n    const elem = ReactDOM.findDOMNode(this);\n    window.requestAnimationFrame(function () {\n      elem.style.transform = \"translateY(10px)\"\n      elem.style.transition = \"transform 1.5s\"\n    })\n  }\n  getLocation(){\n       \n  }\n\n  componentDidMount() {\n    this.handleFade()\n    getIpLocation()\n      .then(({ city, country, latitude, longitude }) => {\n        Google.getCitiesByCoordinates(latitude, longitude)\n          .then((cities) => {\n            const country = cities[cities.length - 1]['short_name']\n            const formatedCities = cities.map((city, i)=>{\n              return [city['long_name'], country]\n              \n            })\n            this.setState({\n              location: `${city}, ${country}`,\n              city: city,\n              country: country,\n              cities: formatedCities\n            })\n          })\n      })\n  }\n\n  render() {\n    const { weatherType, location, data, forecastData, error, cities } = this.state\n    return (\n      <div className=\"app-container\">\n        {\n          (error)?\n          <div>Ha ocurrido un error</div> \n          :\n          (cities.length === 0)?\n            <div className=\"loading-div\"><h3>Cargando</h3></div>\n            :\n            <div>\n                <WeatherSettings\n                  changeWeather={this.changeWeatherType}\n                  wType={weatherType}\n                />\n                <WeatherContent\n                  city={location}\n                  data={data}\n                  forecastData={forecastData}\n                  weatherType={weatherType} />\n                <LocationList\n                  cities={cities}\n                  weatherType={weatherType}\n                  onSelectLocation={this.selectLocation}\n                  selectedCity={location}\n                />   \n            </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default App\n","const BASE_API_URL = \"https://ipapi.co/json/\"\n\nexport const getIpLocation = () => {\n  return new Promise((resolve, reject)=>{\n    fetch(BASE_API_URL)\n      .then( response => response.json())\n      .then( coords => resolve(coords))\n      .catch( error => reject(error))\n  })\n}\n\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.css';\nimport './styles/weather-icons/css/weather-icons.min.css'\n\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}